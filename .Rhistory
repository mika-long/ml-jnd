theme(legend.position = "none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
if (i == df_pos){
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep1/den/", i, "_1.png", sep=""), width=480, height=480, units="px", plot=p)
} else if (i != df_pos) {
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep1/den/", i, "_0.png", sep=""), width=480, height=480, units="px", plot=p)
}
}
d <- 0.4 # size of the shift between distributions
n1 <- 15 # size of the first group of points
r <- 1/3 # ratio between n1 and n2
n2 <- r * n1
data1 <- rexp(n1, 1)
data2 <- rexp(n2, 1/(d + 1))
c_df <- data.frame(
Value = c(data1, data2),
Group = factor(c(rep("1", n1), rep("2", n2)))
)
# lineup data
df <- lineup(null_permute("Value"), c_df)
df_pos <- attr(df, "pos")
# splitting it up
df_split <- df %>% group_split(.sample)
# can't use mapping but might use something else:
for (i in unique(df$.sample)){
df_i <- df_split[[i]]
p <- ggplot(df_i, aes(x = Value, color = Group, fill = Group)) + ylab("") +
geom_density(alpha=0.5) +
theme(legend.position = "none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
if (i == df_pos){
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep1/den/", i, "_1.png", sep=""), width=480, height=480, units="px", plot=p)
} else if (i != df_pos) {
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep1/den/", i, "_0.png", sep=""), width=480, height=480, units="px", plot=p)
}
}
d <- 0.4 # size of the shift between distributions
n1 <- 15 # size of the first group of points
r <- 1/3 # ratio between n1 and n2
n2 <- r * n1
data1 <- rexp(n1, 1)
data2 <- rexp(n2, 1/(d + 1))
c_df <- data.frame(
Value = c(data1, data2),
Group = factor(c(rep("1", n1), rep("2", n2)))
)
# lineup data
df <- lineup(null_permute("Value"), c_df)
df_pos <- attr(df, "pos")
# splitting it up
df_split <- df %>% group_split(.sample)
# can't use mapping but might use something else:
for (i in unique(df$.sample)){
df_i <- df_split[[i]]
p <- ggplot(df_i, aes(x = Value, color = Group, fill = Group)) + ylab("") +
geom_density(alpha=0.5) +
theme(legend.position = "none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
if (i == df_pos){
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep1/den/", i, "_1.png", sep=""), width=480, height=480, units="px", plot=p)
} else if (i != df_pos) {
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep1/den/", i, "_0.png", sep=""), width=480, height=480, units="px", plot=p)
}
}
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep", rep, "/dot/", i, "_0.png", sep=""), width=480, height=480, units="px", plot=p_dot)
range(1, 3)
range(3)
for (rep in range(1, 3)){}
print(rep)
seq(1, 2, 3)
?seq
for (rep in seq(1, 3)){ # generate data for 3 replications
data1 <- rexp(n1, 1)
data2 <- rexp(n2, 1/(d + 1))
# combined dataframe
c_df <- data.frame(
Value = c(data1, data2),
Group = factor(c(rep("1", n1), rep("2", n2)))
)
# lineup data
df <- lineup(null_permute("Value"), c_df)
# real data position
df_pos <- attr(df, "pos")
# splitting it up
df_split <- df %>% group_split(.sample)
for (i in unique(df$.sample)){
df_i <- df_split[[i]]
p_den <- ggplot(df_i, aes(x = Value, color = Group,
fill = Group)) + ylab("") +
geom_density(alpha=0.5) +
theme(legend.position = "none",
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
p_box <- ggplot(df_i, aes(x = Value, y = Group,
fill = Group, color = Group)) +
geom_boxplot(alpha=0.5) + ylab("") +
theme(legend.position = "none",
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
p_hist <- ggplot(df_i, aes(x = Value, fill = Group)) +
geom_histogram(alpha=0.5, stat = "bin", bins = 10) +
ylab("") +
theme(legend.position = "none",
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
p_dot <- ggplot(df_i, aes(x = Value, y = Group,
color = Group)) +
geom_jitter(alpha=0.5, height = 0.05) +
ylab("") +
theme(legend.position = "none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
if (i == df_pos){
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep", rep, "/den/", i, "_1.png", sep=""), width=480, height=480, units="px", plot=p_den)
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep", rep, "/box/", i, "_1.png", sep=""), width=480, height=480, units="px", plot=p_box)
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep", rep, "/hist/", i, "_1.png", sep=""), width=480, height=480, units="px", plot=p_hist)
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep", rep, "/dot/", i, "_1.png", sep=""), width=480, height=480, units="px", plot=p_dot)
} else if (i != df_pos) {
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep", rep, "/den/", i, "_0.png", sep=""), width=480, height=480, units="px", plot=p_den)
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep", rep, "/box/", i, "_0.png", sep=""), width=480, height=480, units="px", plot=p_box)
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep", rep, "/hist/", i, "_0.png", sep=""), width=480, height=480, units="px", plot=p_hist)
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep", rep, "/dot/", i, "_0.png", sep=""), width=480, height=480, units="px", plot=p_dot)
}
}
}
for (d in c(0.4, 0.6, 0.8, 1.0, 1.2)){ print(d)}
?switch
gen_den <- function(data) {
ggplot(data, aes(x = Value, color = Group,
fill = Group)) + ylab("") +
geom_density(alpha=0.5) +
theme(legend.position = "none",
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
}
gen_hist <- function(data){
ggplot(data, aes(x = Value, fill = Group)) +
geom_histogram(alpha=0.5, stat = "bin", bins = 10) +
ylab("") +
theme(legend.position = "none",
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
}
gen_box <- function(data){
ggplot(data, aes(x = Value, y = Group,
fill = Group, color = Group)) +
geom_boxplot(alpha=0.5) + ylab("") +
theme(legend.position = "none",
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
}
gen_dot <- function(data){
ggplot(data, aes(x = Value, y = Group,
color = Group)) +
geom_jitter(alpha=0.5, height = 0.05) +
ylab("") +
theme(legend.position = "none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
gen_graph <- function(data, type) {
switch(type,
den = gen_den(data),
box = gen_box(data),
hist = gen_hist(data),
dot = gen_dot(data)
)
}
save_graph <- function(type, i, graph){
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep", rep, "/", type, "/", i, "_1.png", sep=""), width=480, height=480, units="px", plot=graph)
}
gen_den <- function(data) {
ggplot(data, aes(x = Value, color = Group,
fill = Group)) + ylab("") +
geom_density(alpha=0.5) +
theme(legend.position = "none",
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
}
gen_hist <- function(data){
ggplot(data, aes(x = Value, fill = Group)) +
geom_histogram(alpha=0.5, stat = "bin", bins = 10) +
ylab("") +
theme(legend.position = "none",
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
}
gen_box <- function(data){
ggplot(data, aes(x = Value, y = Group,
fill = Group, color = Group)) +
geom_boxplot(alpha=0.5) + ylab("") +
theme(legend.position = "none",
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
}
gen_dot <- function(data){
ggplot(data, aes(x = Value, y = Group,
color = Group)) +
geom_jitter(alpha=0.5, height = 0.05) +
ylab("") +
theme(legend.position = "none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
gen_graph <- function(data, type) {
switch(type,
den = gen_den(data),
box = gen_box(data),
hist = gen_hist(data),
dot = gen_dot(data)
)
}
save_graph <- function(type, i, graph, tf){
if (tf == TRUE){
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep", rep, "/", type, "/", i, "_1.png", sep=""), width=480, height=480, units="px", plot=graph)
} else {
ggsave(paste("./images/d", d, "n", n1, "r", round(r, 2), "rep", rep, "/", type, "/", i, "_0.png", sep=""), width=480, height=480, units="px", plot=graph)
}
}
for (d in c(0.4, 0.6, 0.8, 1.0, 1.2)){
for (n1 in c(15, 45, 135)){
for (r in c(1/3, 2/3, 3/3)){
n2 <- r * n1
for (rep in seq(1, 3)){ # generate data for 3 replications
data1 <- rexp(n1, 1)
data2 <- rexp(n2, 1/(d + 1))
# combined dataframe
c_df <- data.frame(
Value = c(data1, data2),
Group = factor(c(rep("1", n1), rep("2", n2)))
)
# lineup data
df <- lineup(null_permute("Value"), c_df)
# real data position
df_pos <- attr(df, "pos")
# splitting it up
df_split <- df %>% group_split(.sample)
for (i in unique(df$.sample)){
df_i <- df_split[[i]]
p_den <- gen_graph(df_i, "den")
p_box <- gen_graph(df_i, "box")
p_hist <- gen_graph(df_i, "hist")
p_dot <- gen_graph(df_i, "dot")
if (i == df_pos){
save_graph("den", i, p_den, TRUE)
save_graph("box", i, p_box, TRUE)
save_graph("hist", i, p_hist, TRUE)
save_graph("dot", i, p_dot, TRUE)
} else if (i != df_pos) {
gsave_graph("den", i, p_den, FALSE)
save_graph("box", i, p_box, FALSE)
save_graph("hist", i, p_hist, FALSE)
save_graph("dot", i, p_dot, FALSE)
}
}
}
}
}
}
for (d in c(0.4, 0.6, 0.8, 1.0, 1.2)){
for (n1 in c(15, 45, 135)){
for (r in c(1/3, 2/3, 3/3)){
n2 <- r * n1
for (rep in seq(1, 3)){ # generate data for 3 replications
data1 <- rexp(n1, 1)
data2 <- rexp(n2, 1/(d + 1))
# combined dataframe
c_df <- data.frame(
Value = c(data1, data2),
Group = factor(c(rep("1", n1), rep("2", n2)))
)
# lineup data
df <- lineup(null_permute("Value"), c_df)
# real data position
df_pos <- attr(df, "pos")
# splitting it up
df_split <- df %>% group_split(.sample)
for (i in unique(df$.sample)){
df_i <- df_split[[i]]
p_den <- gen_graph(df_i, "den")
p_box <- gen_graph(df_i, "box")
p_hist <- gen_graph(df_i, "hist")
p_dot <- gen_graph(df_i, "dot")
if (i == df_pos){
save_graph("den", i, p_den, TRUE)
save_graph("box", i, p_box, TRUE)
save_graph("hist", i, p_hist, TRUE)
save_graph("dot", i, p_dot, TRUE)
} else if (i != df_pos) {
save_graph("den", i, p_den, FALSE)
save_graph("box", i, p_box, FALSE)
save_graph("hist", i, p_hist, FALSE)
save_graph("dot", i, p_dot, FALSE)
}
}
}
}
}
}
d <- 0.4
n1 <- 15
r <- 1/3
n2 <- r * n1
for (rep in seq(1, 3)){ # generate data for 3 replications
data1 <- rexp(n1, 1)
data2 <- rexp(n2, 1/(d + 1))
# combined dataframe
c_df <- data.frame(
Value = c(data1, data2),
Group = factor(c(rep("1", n1), rep("2", n2)))
)
# lineup data
df <- lineup(null_permute("Value"), c_df)
# real data position
df_pos <- attr(df, "pos")
# splitting it up
df_split <- df %>% group_split(.sample)
for (i in unique(df$.sample)){
df_i <- df_split[[i]]
p_den <- gen_graph(df_i, "den")
p_box <- gen_graph(df_i, "box")
p_hist <- gen_graph(df_i, "hist")
p_dot <- gen_graph(df_i, "dot")
if (i == df_pos){
save_graph("den", i, p_den, TRUE)
save_graph("box", i, p_box, TRUE)
save_graph("hist", i, p_hist, TRUE)
save_graph("dot", i, p_dot, TRUE)
} else if (i != df_pos) {
save_graph("den", i, p_den, FALSE)
save_graph("box", i, p_box, FALSE)
save_graph("hist", i, p_hist, FALSE)
save_graph("dot", i, p_dot, FALSE)
}
}
}
knitr::opts_chunk$set(echo = TRUE)
library(rethinking)
library(tidyverse)
data(Howell1)
d <- Howell1
str(d)
# filter the data to individuals of age 18 or greater
d2 <- d %>% filter(age >= 18)
str(d2)
dens(d2$height)
?curve
curve(dnorm(x, 178, 20), from = 100, to = 250)
sample_mu <- rnorm(1e4, 178, 20)
sample_mu
sample_mu <- rnorm(1e4, 178, 20)
sample_sigma <- runif(1e4, 0, 50)
prior_h <- rnorm(1e4, sample_mu, sample_sigma)
prior_h
sample_mu <- rnorm(1e4, 178, 20)
sample_sigma <- runif(1e4, 0, 50)
prior_h <- rnorm(1e4, sample_mu, sample_sigma)
dens(prior_h)
?map
# model speification
flist <- alist(
height ~ dnorm(mu, sigma),
mu ~ dnorm(178, 20),
signam ~ dunif(0, 50)
)
# fitting it with map
m4.1 <- rethinking::map(flist, data=d2)
# fitting it with map
m4.1 <- map(flist, data=d2)
flist
# model speification
flist <- alist(
height ~ dnorm(mu, sigma),
mu ~ dnorm(178, 20),
sigma ~ dunif(0, 50)
)
# fitting it with map
m4.1 <- map(flist, data=d2)
m4.1
precis(m4.1)
m4.2 <- map(
alist(
height ~ dnorm(mu, sigma),
mu ~ dnorm(178, 0.1),
sigma ~ dunif(0, 50)
), data = d2
)
precis(m4.2)
# model speification
flist <- alist(
height ~ dnorm(mu, sigma),
mu ~ dnorm(178, 20),
sigma ~ dunif(0, 50)
)
# fitting it with map
m4.1 <- map(flist, data=d2)
# model speification
flist <- alist(
height ~ dnorm(mu, sigma),
mu ~ dnorm(178, 20),
sigma ~ dunif(0, 50)
)
# fitting it with map
m4.1 <- rethinking::map(flist, data=d2)
post <- extract.samples(m4.1, n=1e4)
head(post)
precis(post)
plot(d2$height, d2$weight)
d2
head(d2)
m4.3 <- map(
alist(
height ~ dnorm(mu, sigma),
mu <- a + b * weight,
a ~ dnorm(156, 100),
b ~ dnorm(0, 10),
sigma ~ dunif(0, 50)
),
data = d2
)
m4.3 <- rethinking::map(
alist(
height ~ dnorm(mu, sigma),
mu <- a + b * weight,
a ~ dnorm(156, 100),
b ~ dnorm(0, 10),
sigma ~ dunif(0, 50)
),
data = d2
)
precis(m4.3)
precis(m4.3, corr=TRUE)
d2$weight.c <- d2$weight - mean(d2$weight)
d2$weight.c
mean(d2$weight.c)
rethinking::precis(m4.3, corr=TRUE)
d2$weight.c <- d2$weight - mean(d2$weight)
m4.4 <- map(
alist(
height ~ dnorm(mu, sigma),
mu <- a + b * weight.c,
a ~ dnorm(178, 100),
b ~ dnorm(0, 10),
sigma ~ dunif(0, 50)
), data = d2
)
precis(m4.4, corr= TRUE)
d2$height
mean(d2$height)
plot(height ~ weight, data=d2)
plot(height ~ weight, data=d2)
abline(a=coef(m4.3)["a"], b=coef(m4.3)["b"])
plot(height ~ weight, data=d2, color="blue")
abline(a=coef(m4.3)["a"], b=coef(m4.3)["b"])
plot(height ~ weight, data=d2, color="blue")
abline(a=coef(m4.3)["a"], b=coef(m4.3)["b"])
?plot
plot(height ~ weight, data=d2)
abline(a=coef(m4.3)["a"], b=coef(m4.3)["b"])
coef(m4.3)
plot(height ~ weight, data=d2)
abline(a=coef(m4.3)["a"], b=coef(m4.3)["b"], color="blue")
?abline
plot(height ~ weight, data=d2)
abline(a=coef(m4.3)["a"], b=coef(m4.3)["b"], col="blue")
plot(height ~ weight, data=d2)
abline(a=coef(m4.3)["a"], b=coef(m4.3)["b"], col="red")
plot(height, weight, data = d)
plot(d$height, d$weight)
knitr::opts_chunk$set(echo = TRUE, fig.margin=TRUE, fig.pos = "-1cm")
library(rethinking)
library(tidyverse)
rethinking::precis(m4.3, corr=TRUE)
knitr::opts_chunk$set(echo = TRUE, fig.margin=TRUE, fig.height=5)
library(rethinking)
library(tidyverse)
d$weight.s <- (d$weight - mean(d$weight))/sd(d$weight)
str(d)
mean(d$weight.s)
sd(d$weight.s)
plot(height ~ weight.s)
plot(d$height ~ d$weight.s)
d$weight.s2 <- d$weight^2
m4.5 <- rethinking::map(
alist(
height ~ dnorm(mu, sigma),
mu <- a + b1 * weight.s + b2 * weight.s2,
a ~ dnorm(178, 100),
b1 ~ dnorm(0, 10),
b2 ~ dnorm(0, 10),
sigma ~ dunif(0, 50)
), data = d
)
precis(m4.5)
